(function(){
  var each, map, reduce, filter, mapConcat, concat, slice$ = [].slice;
  each = curry$(function(f, xs){
    var i$, len$, i, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      f(x);
    }
    return xs;
  });
  map = curry$(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      results$.push(f(x));
    }
    return results$;
  });
  reduce = curry$(function(f, initial, xs){
    var result, i$, len$, x;
    result = initial;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      result = f(result, x);
    }
    return result;
  });
  filter = curry$(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (f(x)) {
        results$.push(x);
      }
    }
    return results$;
  });
  mapConcat = curry$(function(f, xs){
    var flatTransform;
    flatTransform = function(ys, a){
      ys.push.apply(ys, f(a));
      return ys;
    };
    return reduce(flatTransform, [], xs);
  });
  concat = function(){
    var xs;
    xs = slice$.call(arguments);
    return mapConcat(function(it){
      return it;
    }, xs);
  };
  module.exports = {
    map: map,
    each: each,
    reduce: reduce,
    filter: filter,
    concat: concat,
    mapConcat: mapConcat
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
